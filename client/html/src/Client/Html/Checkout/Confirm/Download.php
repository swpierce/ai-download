<?php

/**
 * @copyright Copyright (c) 12 Paw Paperie, 2015
 * @license LGPLv3, http://opensource.org/licenses/LGPL-3.0
 * @package Client
 * @subpackage Html
 */


/**
 * Default implementation of confirm checkout HTML client.
 *
 * @package Client
 * @subpackage Html
 */
class Client_Html_Checkout_Confirm_Download
	extends Client_Html_Common_Client_Factory_Abstract
	implements Client_Html_Common_Client_Factory_Interface
{
	/** client/html/checkout/confirm/download/subparts
	 * List of HTML sub-clients rendered within the checkout confirm section
	 *
	 * The output of the frontend is composed of the code generated by the HTML
	 * clients. Each HTML client can consist of serveral (or none) sub-clients
	 * that are responsible for rendering certain sub-parts of the output. The
	 * sub-clients can contain HTML clients themselves and therefore a
	 * hierarchical tree of HTML clients is composed. Each HTML client creates
	 * the output that is placed inside the container of its parent.
	 *
	 * At first, always the HTML code generated by the parent is printed, then
	 * the HTML code of its sub-clients. The order of the HTML sub-clients
	 * determines the order of the output of these sub-clients inside the parent
	 * container. If the configured list of clients is
	 *
	 *  array( "subclient1", "subclient2" )
	 *
	 * you can easily change the order of the output by reordering the subparts:
	 *
	 *  client/html/<clients>/subparts = array( "subclient1", "subclient2" )
	 *
	 * You can also remove one or more parts if they shouldn't be rendered:
	 *
	 *  client/html/<clients>/subparts = array( "subclient1" )
	 *
	 * As the clients only generates structural HTML, the layout defined via CSS
	 * should support adding, removing or reordering content by a fluid like
	 * design.
	 *
	 * @param array List of sub-client names
	 * @since 2014.03
	 * @category Developer
	 */
	private $_subPartPath = 'client/html/checkout/confirm/download/subparts';

	/** client/html/checkout/confirm/intro/name
	 * Name of the intro part used by the checkout confirm client implementation
	 *
	 * Use "Myname" if your class is named "Client_Html_Checkout_Confirm_Intro_Myname".
	 * The name is case-sensitive and you should avoid camel case names like "MyName".
	 *
	 * @param string Last part of the client class name
	 * @since 2014.07
	 * @category Developer
	 */

	/** client/html/checkout/confirm/basic/name
	 * Name of the basic part used by the checkout confirm client implementation
	 *
	 * Use "Myname" if your class is named "Client_Html_Checkout_Confirm_Basic_Myname".
	 * The name is case-sensitive and you should avoid camel case names like "MyName".
	 *
	 * @param string Last part of the client class name
	 * @since 2014.03
	 * @category Developer
	 */

	/** client/html/checkout/confirm/retry/name
	 * Name of the retry part used by the checkout confirm client implementation
	 *
	 * Use "Myname" if your class is named "Client_Html_Checkout_Confirm_Retry_Myname".
	 * The name is case-sensitive and you should avoid camel case names like "MyName".
	 *
	 * @param string Last part of the client class name
	 * @since 2014.07
	 * @category Developer
	 */

	/** client/html/checkout/confirm/order/name
	 * Name of the order part used by the checkout confirm client implementation
	 *
	 * Use "Myname" if your class is named "Client_Html_Checkout_Confirm_Order_Myname".
	 * The name is case-sensitive and you should avoid camel case names like "MyName".
	 *
	 * @param string Last part of the client class name
	 * @since 2015.02
	 * @category Developer
	 */
	private $_subPartNames = array( 'intro', 'basic', 'retry', 'order' );
	private $_cache;


	/**
	 * Returns the HTML code for insertion into the body.
	 *
	 * @param string $uid Unique identifier for the output if the content is placed more than once on the same page
	 * @param array &$tags Result array for the list of tags that are associated to the output
	 * @param string|null &$expire Result variable for the expiration date of the output (null for no expiry)
	 * @return string HTML code
	 */
	public function getBody( $uid = '', array &$tags = array(), &$expire = null )
	{
		$context = $this->_getContext();
		$view = $this->getView();

		try
		{
			$view = $this->_setViewParams( $view, $tags, $expire );

			$html = '';
			foreach( $this->_getSubClients() as $subclient ) {
				$html .= $subclient->setView( $view )->getBody( $uid, $tags, $expire );
			}
			$view->confirmBody = $html;
		}
		catch( Client_Html_Exception $e )
		{
			$error = array( $this->_getContext()->getI18n()->dt( 'client/html', $e->getMessage() ) );
			$view->confirmErrorList = $view->get( 'confirmErrorList', array() ) + $error;
		}
		catch( Controller_Frontend_Exception $e )
		{
			$error = array( $this->_getContext()->getI18n()->dt( 'controller/frontend', $e->getMessage() ) );
			$view->confirmErrorList = $view->get( 'confirmErrorList', array() ) + $error;
		}
		catch( MShop_Exception $e )
		{
			$error = array( $this->_getContext()->getI18n()->dt( 'mshop', $e->getMessage() ) );
			$view->confirmErrorList = $view->get( 'confirmErrorList', array() ) + $error;
		}
		catch( Exception $e )
		{
			$context->getLogger()->log( $e->getMessage() . PHP_EOL . $e->getTraceAsString() );

			$error = array( $context->getI18n()->dt( 'client/html', 'A non-recoverable error occured' ) );
			$view->confirmErrorList = $view->get( 'confirmErrorList', array() ) + $error;
		}

		/** client/html/checkout/confirm/download/template-body
		 * Relative path to the HTML body template of the checkout confirm client.
		 *
		 * The template file contains the HTML code and processing instructions
		 * to generate the result shown in the body of the frontend. The
		 * configuration string is the path to the template file relative
		 * to the layouts directory (usually in client/html/layouts).
		 *
		 * You can overwrite the template file configuration in extensions and
		 * provide alternative templates. These alternative templates should be
		 * named like the download one but with the string "download" replaced by
		 * an unique name. You may use the name of your project for this. If
		 * you've implemented an alternative client class as well, "download"
		 * should be replaced by the name of the new class.
		 *
		 * @param string Relative path to the template creating code for the HTML page body
		 * @since 2014.03
		 * @category Developer
		 * @see client/html/checkout/confirm/download/template-header
		 */
		$tplconf = 'client/html/checkout/confirm/download/template-body';
		$download = 'checkout/confirm/body-download.html';

		return $view->render( $this->_getTemplate( $tplconf, $download ) );
	}


	/**
	 * Returns the HTML string for insertion into the header.
	 *
	 * @param string $uid Unique identifier for the output if the content is placed more than once on the same page
	 * @param array &$tags Result array for the list of tags that are associated to the output
	 * @param string|null &$expire Result variable for the expiration date of the output (null for no expiry)
	 * @return string|null String including HTML tags for the header on error
	 */
	public function getHeader( $uid = '', array &$tags = array(), &$expire = null )
	{
		try
		{
			$view = $this->_setViewParams( $this->getView(), $tags, $expire );

			$html = '';
			foreach( $this->_getSubClients() as $subclient ) {
				$html .= $subclient->setView( $view )->getHeader( $uid, $tags, $expire );
			}
			$view->confirmHeader = $html;

			/** client/html/checkout/confirm/download/template-header
			 * Relative path to the HTML header template of the checkout confirm client.
			 *
			 * The template file contains the HTML code and processing instructions
			 * to generate the HTML code that is inserted into the HTML page header
			 * of the rendered page in the frontend. The configuration string is the
			 * path to the template file relative to the layouts directory (usually
			 * in client/html/layouts).
			 *
			 * You can overwrite the template file configuration in extensions and
			 * provide alternative templates. These alternative templates should be
			 * named like the download one but with the string "download" replaced by
			 * an unique name. You may use the name of your project for this. If
			 * you've implemented an alternative client class as well, "download"
			 * should be replaced by the name of the new class.
			 *
			 * @param string Relative path to the template creating code for the HTML page head
			 * @since 2014.03
			 * @category Developer
			 * @see client/html/checkout/confirm/download/template-body
			 */
			$tplconf = 'client/html/checkout/confirm/download/template-header';
			$download = 'checkout/confirm/header-download.html';

			return $view->render( $this->_getTemplate( $tplconf, $download ) );
		}
		catch( Exception $e )
		{
			$this->_getContext()->getLogger()->log( $e->getMessage() . PHP_EOL . $e->getTraceAsString() );
		}
	}


	/**
	 * Returns the sub-client given by its name.
	 *
	 * @param string $type Name of the client type
	 * @param string|null $name Name of the sub-client (Default if null)
	 * @return Client_Html_Interface Sub-client object
	 */
	public function getSubClient( $type, $name = null )
	{
		/** client/html/checkout/confirm/decorators/excludes
		 * Excludes decorators added by the "common" option from the checkout confirm html client
		 *
		 * Decorators extend the functionality of a class by adding new aspects
		 * (e.g. log what is currently done), executing the methods of the underlying
		 * class only in certain conditions (e.g. only for logged in users) or
		 * modify what is returned to the caller.
		 *
		 * This option allows you to remove a decorator added via
		 * "client/html/common/decorators/download" before they are wrapped
		 * around the html client.
		 *
		 *  client/html/checkout/confirm/decorators/excludes = array( 'decorator1' )
		 *
		 * This would remove the decorator named "decorator1" from the list of
		 * common decorators ("Client_Html_Common_Decorator_*") added via
		 * "client/html/common/decorators/download" to the html client.
		 *
		 * @param array List of decorator names
		 * @since 2014.05
		 * @category Developer
		 * @see client/html/common/decorators/download
		 * @see client/html/checkout/confirm/decorators/global
		 * @see client/html/checkout/confirm/decorators/local
		 */

		/** client/html/checkout/confirm/decorators/global
		 * Adds a list of globally available decorators only to the checkout confirm html client
		 *
		 * Decorators extend the functionality of a class by adding new aspects
		 * (e.g. log what is currently done), executing the methods of the underlying
		 * class only in certain conditions (e.g. only for logged in users) or
		 * modify what is returned to the caller.
		 *
		 * This option allows you to wrap global decorators
		 * ("Client_Html_Common_Decorator_*") around the html client.
		 *
		 *  client/html/checkout/confirm/decorators/global = array( 'decorator1' )
		 *
		 * This would add the decorator named "decorator1" defined by
		 * "Client_Html_Common_Decorator_Decorator1" only to the html client.
		 *
		 * @param array List of decorator names
		 * @since 2014.05
		 * @category Developer
		 * @see client/html/common/decorators/download
		 * @see client/html/checkout/confirm/decorators/excludes
		 * @see client/html/checkout/confirm/decorators/local
		 */

		/** client/html/checkout/confirm/decorators/local
		 * Adds a list of local decorators only to the checkout confirm html client
		 *
		 * Decorators extend the functionality of a class by adding new aspects
		 * (e.g. log what is currently done), executing the methods of the underlying
		 * class only in certain conditions (e.g. only for logged in users) or
		 * modify what is returned to the caller.
		 *
		 * This option allows you to wrap local decorators
		 * ("Client_Html_Checkout_Decorator_*") around the html client.
		 *
		 *  client/html/checkout/confirm/decorators/local = array( 'decorator2' )
		 *
		 * This would add the decorator named "decorator2" defined by
		 * "Client_Html_Checkout_Decorator_Decorator2" only to the html client.
		 *
		 * @param array List of decorator names
		 * @since 2014.05
		 * @category Developer
		 * @see client/html/common/decorators/download
		 * @see client/html/checkout/confirm/decorators/excludes
		 * @see client/html/checkout/confirm/decorators/global
		 */

		return $this->_createSubClient( 'checkout/confirm/' . $type, $name );
	}


	/**
	 * Processes the input, e.g. store given values.
	 * A view must be available and this method doesn't generate any output
	 * besides setting view variables.
	 */
	public function process()
	{
		$view = $this->getView();
		$context = $this->_getContext();
		$session = $context->getSession();
		$orderid = $session->get( 'arcavias/orderid' );

		try
		{
			if( ( $orderItem = $this->_updatePayment( $view, $orderid ) ) === null )
			{
				$orderManager = MShop_Factory::createManager( $context, 'order' );
				$orderItem = $orderManager->getItem( $orderid );
			}

			$view->confirmOrderItem = $orderItem;


			parent::process();


			if( $orderItem->getPaymentStatus() > MShop_Order_Item_Abstract::PAY_REFUSED )
			{
				foreach( $session->get( 'arcavias/basket/cache', array() ) as $key => $value ) {
					$session->set( $key, null );
				}

				Controller_Frontend_Factory::createController( $context, 'basket' )->clear();
			}
            
            if( $orderItem->getPaymentStatus() == MShop_Order_Item_Abstract::PAY_RECEIVED )
            {
                $orderBaseManager = MShop_Factory::createManager( $context, 'order/base' );
                $orderBase = $orderBaseManager->load( $orderItem->getBaseId() );
                $attributeManager = MShop_Factory::createManager( $context, 'attribute' );
                $downloadManager = MShop_Factory::createManager( $context, 'download' );
                foreach( $orderBase->getProducts() as $product )
                {
                    $dfProdAttr = $product->getAttributeItem( 'digital-file', 'hidden' );
                    $dfAttr = $attributeManager->getItem( $dfProdAttr->getAttributeId(), array( 'media' ) );
                    $listItems = $dfAttr->getRefItems( 'media' );
                    $media = reset( $listItems );
                    
                    $download = $downloadManager->createItem();
                    $download->setUserId( $context->getUserId() );
                    $download->setFileId( $this->_generateId() );
                    $download->setProductId( $product->getId() );
                    $download->setOrderBaseId( $orderBase->getId() );
                    $download->setUrl( $media->getUrl() );
                    $download->setDownloads( 0 );
                    $downloadManager->saveItem( $download );
                }
            }
                
			// Update stock, coupons, etc.
			Controller_Frontend_Factory::createController( $context, 'order' )->update( $orderItem );
		}
		catch( Client_Html_Exception $e )
		{
			$error = array( $context->getI18n()->dt( 'client/html', $e->getMessage() ) );
			$view->confirmErrorList = $view->get( 'confirmErrorList', array() ) + $error;
		}
		catch( Controller_Frontend_Exception $e )
		{
			$error = array( $context->getI18n()->dt( 'controller/frontend', $e->getMessage() ) );
			$view->confirmErrorList = $view->get( 'confirmErrorList', array() ) + $error;
		}
		catch( MShop_Exception $e )
		{
			$error = array( $context->getI18n()->dt( 'mshop', $e->getMessage() ) );
			$view->confirmErrorList = $view->get( 'confirmErrorList', array() ) + $error;
		}
		catch( Exception $e )
		{
			$context->getLogger()->log( $e->getMessage() . PHP_EOL . $e->getTraceAsString() );

			$error = array( $context->getI18n()->dt( 'client/html', 'A non-recoverable error occured' ) );
			$view->confirmErrorList = $view->get( 'confirmErrorList', array() ) + $error;
		}
	}


	/**
	 * Returns the payment service providere for the given code
	 *
	 * @param string $code Unique service code
	 * @throws Client_Html_Exception If no payment service item could be found
	 * @return MShop_Service_Provider_Interface Service provider object
	 */
	protected function _getServiceProvider( $code )
	{
		$serviceManager = MShop_Factory::createManager( $this->_getContext(), 'service' );

		$search = $serviceManager->createSearch();
		$expr = array(
			$search->compare( '==', 'service.code', $code ),
			$search->compare( '==', 'service.type.code', 'payment' ),
		);
		$search->setConditions( $search->combine( '&&', $expr ) );

		$result = $serviceManager->searchItems( $search );

		if( ( $serviceItem = reset( $result ) ) === false )
		{
			$msg = sprintf( 'No service for code "%1$s" found', $code );
			throw new Client_Html_Exception( $msg );
		}

		return $serviceManager->getProvider( $serviceItem );
	}


	/**
	 * Returns the list of sub-client names configured for the client.
	 *
	 * @return array List of HTML client names
	 */
	protected function _getSubClientNames()
	{
		return $this->_getContext()->getConfig()->get( $this->_subPartPath, $this->_subPartNames );
	}


	/**
	 * Returns the URL to the confirm page.
	 *
	 * @param MW_View_Interface $view View object
	 * @param array $params Parameters that should be part of the URL
	 * @param array $config Default URL configuration
	 * @return string URL string
	 */
	protected function _getUrlConfirm( MW_View_Interface $view, array $params, array $config )
	{
		$target = $view->config( 'client/html/checkout/confirm/url/target' );
		$cntl = $view->config( 'client/html/checkout/confirm/url/controller', 'checkout' );
		$action = $view->config( 'client/html/checkout/confirm/url/action', 'confirm' );
		$config = $view->config( 'client/html/checkout/confirm/url/config', $config );

		return $view->url( $target, $cntl, $action, $params, array(), $config );
	}


	/**
	 * Returns the URL to the update page.
	 *
	 * @param MW_View_Interface $view View object
	 * @param array $params Parameters that should be part of the URL
	 * @param array $config Default URL configuration
	 * @return string URL string
	 */
	protected function _getUrlUpdate( MW_View_Interface $view, array $params, array $config )
	{
		$target = $view->config( 'client/html/checkout/update/url/target' );
		$cntl = $view->config( 'client/html/checkout/update/url/controller', 'checkout' );
		$action = $view->config( 'client/html/checkout/update/url/action', 'update' );
		$config = $view->config( 'client/html/checkout/update/url/config', $config );

		return $view->url( $target, $cntl, $action, $params, array(), $config );
	}


	/**
	 * Sets the necessary parameter values in the view.
	 *
	 * @param MW_View_Interface $view The view object which generates the HTML output
	 * @param array &$tags Result array for the list of tags that are associated to the output
	 * @param string|null &$expire Result variable for the expiration date of the output (null for no expiry)
	 * @return MW_View_Interface Modified view object
	 */
	protected function _setViewParams( MW_View_Interface $view, array &$tags = array(), &$expire = null )
	{
		if( !isset( $this->_cache ) )
		{
			if( !isset( $view->confirmOrderItem ) )
			{
				$context = $this->_getContext();
				$orderid = $context->getSession()->get( 'arcavias/orderid' );
				$orderManager = MShop_Factory::createManager( $context, 'order' );

				$view->confirmOrderItem = $orderManager->getItem( $orderid );
			}

			$this->_cache = $view;
		}

		return $this->_cache;
	}


	/**
	 * Updates the payment status for the given order ID and returns the order item
	 *
	 * @param MW_View_Interface $view View object of the HTML client
	 * @param string $orderid ID of the order whose payment status should be updated
	 * @return void|MShop_Order_Item_Interface Order item that has been updated
	 */
	protected function _updatePayment( MW_View_Interface $view, $orderid )
	{
		if( ( $code = $view->param( 'code' ) ) === null ) {
			return;
		}

		$provider = $this->_getServiceProvider( $code );

		$config = array( 'absoluteUri' => true, 'namespace' => false );
		$params = array( 'code' => $code, 'orderid' => $orderid );
		$urls = array(
			'payment.url-success' => $this->_getUrlConfirm( $view, $params, $config ),
			'payment.url-update' => $this->_getUrlUpdate( $view, $params, $config ),
			'client.ipaddress' => $view->request()->getClientAddress(),
		);
		$urls['payment.url-self'] = $urls['payment.url-success'];
		$provider->injectGlobalConfigBE( $urls );

		$reqParams = $view->param();
		$reqParams['orderid'] = $orderid;

		if( ( $orderItem = $provider->updateSync( $reqParams, $view->request()->getBody() ) ) !== null
			&& $orderItem->getPaymentStatus() === MShop_Order_Item_Abstract::PAY_UNFINISHED
			&& $provider->isImplemented( MShop_Service_Provider_Payment_Abstract::FEAT_QUERY )
		) {
			$provider->query( $orderItem );
		}

		return $orderItem;
	}
    
    protected function _generateId() {
        $result = '';
        for( $i = 0; $i <= 15; $i++ )
        {
            $result .= mt_rand( 0, 9 );
        }
        return $result;
    }
}
